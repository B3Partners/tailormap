name: Ubuntu Maven build

on:
  push:
    paths-ignore:
      - 'tailormap-components/**'
  pull_request:
    paths-ignore:
      - 'tailormap-components/**'
  workflow_dispatch:
    paths-ignore:
      - 'tailormap-components/**'
jobs:
  build:
    name: Ubuntu Java 11 Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: setup database
        run: |
          sudo systemctl start postgresql.service
          psql --version
          sudo -u postgres psql -d postgres -c 'SELECT Version();' || true
          sudo -u postgres psql -a -c "CREATE ROLE flamingo4 LOGIN PASSWORD 'flamingo4' SUPERUSER CREATEDB;"
          sudo -u postgres psql -a -c 'CREATE DATABASE flamingo4;'
          sudo -u postgres psql -a -c 'ALTER DATABASE flamingo4 OWNER TO flamingo4;'
      - name: Priming build with Maven
        run: mvn install -DskipTests -Dtest.skip.integrationtests=true -B -V -fae
      - name: Test with Maven
        run: |
          mvn -e clean test -B
          mvn -e verify -B -Pgh-action -pl '!viewer-admin'
          mvn -e verify -B -Pgh-action -pl ':tailormap,:viewer-admin'
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
      - name: Build javadoc
        run: mvn javadoc:javadoc
      - name: Build test javadoc
        run: mvn javadoc:test-javadoc


  deploy:
    name: Deploy artifacts
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/master' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Build and Push
        # no need to run any QC or tests
        # note deploy will deploy both Maven artifact as well as docker image
        env:
          REPO_B3P_ACTOR: ${{ secrets.REPO_B3P_ACTOR }}
          REPO_B3P_TOKEN: ${{ secrets.REPO_B3P_TOKEN }}
        run: |
          mvn -B -V -fae -DskipTests -DskipITs -Dtest.skip.integrationtests=true deploy --settings .github/maven-settings.xml


  cleanup:
    name: Maven cache cleanup
    if: ${{ always() }}
    needs: [ build, deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Cleanup snapshot cache
        run: |
          find ~/.m2/repository -name "*SNAPSHOT*" -type d | xargs rm -rf {}
