# in memory
# spring.datasource.url=jdbc:hsqldb:mem:unittest-hsqldb-TESTNAMETOKEN/db;DB_CLOSE_DELAY=-1
# on disk
spring.datasource.url=jdbc:hsqldb:file:./target/unittest-hsqldb-TESTNAMETOKEN/db;shutdown=true
spring.sql.init.mode=always
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
# wait for hibernate to create database
spring.jpa.defer-datasource-initialization=true
# neither of below seems to work, so we need the magic filename "import.sql" which Maven takes care of
#spring.jpa.properties.hibernate.hbm2ddl.import_files=testdata.sql
#spring.sql.init.data-locations=testdata.sql

# HIBERNATE overrides for persistence.xml
hibernate.show_sql=false
# override required to make initial data import work
hibernate.hbm2ddl.auto=create-drop


# LOGGING
logging.level.org.springframework.boot.autoconfigure=INFO
logging.level.nl.tailormap=INFO
logging.level.nl.tailormap.viewer_ng=TRACE
#logging.level.nl.tailormap.viewer.util=DEBUG

logging.level.org.hibernate=INFO
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.internal=DEBUG
#logging.level.org.hibernate.event.internal=DEBUG
#logging.level.org.hibernate.engine.internal=DEBUG
#logging.level.org.hibernate.persister=DEBUG